<#
.Synopsis
   Cmdlet used to change Idrac attribute using REDFISH API.

.DESCRIPTION
   Cmdlet used to change Idrac attribute using REDFISH API.

.PARAMETER Ip_Idrac

    Specifies the IpAddress of Remote system's Idrac.

.PARAMETER Credential

    Specifies the credentials for Idrac connection.

.PARAMETER Session

    Specifies the session generated by New-RacSession for Idrac connection.

.PARAMETER Attribute

    Specifies the attribute that has to be changed.

.EXAMPLE
    Get-RacManagerAttribute -Ip_Idrac 10.2.160.84 -Credential $Cred -Attribute 'WebServer.1.ManualDNSEntry'

    This example grabs the value of the attrubute WebServer.1.ManualDNSEntry

.LINK
#>

Function Get-RacManagerAttribute {
    [CmdletBinding()]
	param(
		[Parameter(Mandatory=$true, ParameterSetName = "Creds")]
        [string]$Ip_Idrac,
        [Parameter(Mandatory=$true, ParameterSetName = "Creds")]
        [pscredential]$Credential,
        [Parameter(Mandatory=$true, ParameterSetName = "Session")]
        [PSCustomObject]$Session,
        [Parameter(Mandatory=$true)]
        [string]$Attribute
	)

        Switch ($PsCmdlet.ParameterSetName) {
            Creds {
                $WebRequestParameter = @{
                    Headers = @{"Accept"="application/json"}
                    Credential = $Credential
                    Method = 'Get'
                    ContentType = 'application/json'
                }
            }

            Session {
                $WebRequestParameter = @{
                    Headers = $Session.Headers
                    Method = 'Get'
                }
                $Ip_Idrac = $Session.IPAddress
            }
        }

# Built User list to get user's Id
    $GetUri = "https://$Ip_Idrac/redfish/v1/Managers/iDRAC.Embedded.1/Attributes"
    $WebRequestParameter.Uri = $GetUri
    Try {
        $GetResult = Invoke-RestMethod @WebRequestParameter -UseBasicParsing
    } Catch {
        Throw $_
    }

    $Object = $($GetResult.Attributes).psobject.Properties | Where-object Name -eq $Attribute
    If ($null -eq $Object) {
        Write-host "This attribute does not exist"
    } Else {
        Return  $Object.Value
    }
}
Export-ModuleMember Get-RacManagerAttribute
