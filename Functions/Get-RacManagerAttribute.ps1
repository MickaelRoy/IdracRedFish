<#
.Synopsis
   Cmdlet used to change Idrac attribute using REDFISH API.

.DESCRIPTION
   Cmdlet used to change Idrac attribute using REDFISH API.

.PARAMETER Ip_Idrac

    Specifies the IpAddress of Remote system's Idrac.

.PARAMETER Credential

    Specifies the credentials for Idrac connection.

.PARAMETER Session

    Specifies the session generated by New-RacSession for Idrac connection.

.PARAMETER Attribute

    Specifies the attribute that has to be changed.

.EXAMPLE
    Get-RacManagerAttribute -Ip_Idrac 10.2.160.84 -Credential $Cred -Attribute 'WebServer.1.ManualDNSEntry'

    This example grabs the value of the attrubute WebServer.1.ManualDNSEntry

.LINK
#>

Function Get-RacManagerAttribute {
    [CmdletBinding(DefaultParameterSetName='Host')]
	param(
        [Parameter(ParameterSetName = 'Ip', Mandatory = $true, Position = 0)]
        [Alias("idrac_ip")]
        [ValidateNotNullOrEmpty()]
        [IpAddress]$Ip_Idrac,

        [Parameter(ParameterSetName = 'Host', Mandatory = $true, Position = 0)]
        [Alias("Server")]
        [ValidateNotNullOrEmpty()]
        [string]$Hostname,

        [Parameter(ParameterSetName = 'Ip', Mandatory = $true, Position = 1)]
        [Parameter(ParameterSetName = 'Host', Mandatory = $true, Position = 1)]
        [ValidateNotNullOrEmpty()]
        [pscredential]$Credential,

        [Parameter(ParameterSetName = 'Session', Mandatory = $true, Position = 0)]
        [ValidateNotNullOrEmpty()]
        [PSCustomObject]$Session,
        
        [Parameter(Mandatory=$false)]
        [string]$Attribute,

        [Switch]$NoProxy
	)

    If ($PSBoundParameters['Hostname']) {
        $Ip_Idrac = [System.Net.Dns]::Resolve($Hostname).AddressList.IPAddressToString
    }
    Write-Verbose "Adresse IP solicitée: $Ip_Idrac"

    Switch ($PsCmdlet.ParameterSetName) {
        Session {
            Write-Verbose -Message "Entering Session ParameterSet"
            $WebRequestParameter = @{
                Headers = $Session.Headers
                Method  = 'Get'
            }
            $Ip_Idrac = $Session.IPAddress
        }
        Default {
            Write-Verbose -Message "Entering Credentials ParameterSet"
            $WebRequestParameter = @{
                Headers     = @{"Accept" = "application/json" }
                Credential  = $Credential
                Method      = 'Get'
                ContentType = 'application/json'
            }
        }
    }

    If (! $NoProxy) { Set-myProxyAsDefault -Uri "Https://$Ip_Idrac" | Out-null }
    Else {
        Write-Verbose "No proxy requested"
        $Proxy = [System.Net.WebProxy]::new()
        $WebSession = [Microsoft.PowerShell.Commands.WebRequestSession]::new()
        $WebSession.Proxy = $Proxy
        $WebRequestParameter.WebSession = $WebSession
        If ($PSVersionTable.PSVersion.Major -gt 5) { $WebRequestParameter.SkipCertificateCheck = $true }
    }

    # Built User list to get user's Id
    $GetUri = "https://$Ip_Idrac/redfish/v1/Managers/iDRAC.Embedded.1/Attributes"
    Write-Verbose "Uri de base : $GetUri"

    If ($PSBoundParameters.ContainsKey('Attribute')) { $GetUri += "?`$select=Attributes/$Attribute" }
    Write-Verbose "Uri définitive : $GetUri"

    $WebRequestParameter.Uri = $GetUri
    
    Try {
        $GetResult = Invoke-RestMethod @WebRequestParameter
    } Catch {
        Throw $_
    }

    $Object = $GetResult.Attributes
    If ($null -eq $Object) {
        Write-host "This attribute does not exist"
    } Else {
        Return  $Object
    }
}

Export-ModuleMember Get-RacManagerAttribute
